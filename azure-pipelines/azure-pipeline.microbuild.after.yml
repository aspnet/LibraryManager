steps:
- task: ManifestGeneratorTask@0
  displayName: 'Generate SBOM For VSIX Insertion'
  inputs:
    BuildDropPath: '$(Build.SourcesDirectory)\bin\Microsoft.Web.LibraryManager.Vsix\Release'
- task: MSBuild@1
  displayName: Build VS Installer Manifest
  inputs:
    solution: setup/Microsoft.Web.LibraryManager.vsmanproj
    msbuildArguments: >
      /r
      /p:Configuration=Release
      /bl:"$(Build.ArtifactStagingDirectory)/build_logs/vsmanproj.binlog"

- task: MSBuild@1
  displayName: Generate parameters for VS Insertion
  inputs:
    solution: build/CreateInsertionMetadata.proj
    msbuildArguments: /r

- task: CopyFiles@2
  inputs:
    contents: |
      bin/**/*.vsman
      bin/**/*.vsix
      bin/sbom/*.json
      bin/InsertionParameters.txt
    targetFolder: $(Build.ArtifactStagingDirectory)/insertion
    flattenFolders: true
  displayName: Collecting VS Insertion artifacts

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/insertion
    ArtifactName: VSInsertion
    ArtifactType: Container
  displayName: Publish insertion artifacts

- task: MicroBuildUploadVstsDropFolder@1
  displayName: Upload artifacts to VSTS Drop
  inputs:
    AccessToken: $(System.AccessToken)
    DropFolder: '$(Build.ArtifactStagingDirectory)/insertion'
    condition: and(succeeded(), eq(variables['SignType'], 'Real'))

- task: MicroBuildCleanup@1
  condition: succeededOrFailed()
  displayName: MicroBuild Cleanup

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: Component Detection
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# The Convert-PDB.ps1 script uses nuget.exe at the cmdline, so make sure it's on our PATH
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: 5.4.0
  displayName: Pin nuget.exe version

- powershell: |
    $DllPaths = @(
        ,"bin\libman.dll"
        ,"bin\Microsoft.Web.LibraryManager.dll"
        ,"bin\Microsoft.Web.LibraryManager.Build.dll"
        ,"bin\Microsoft.Web.LibraryManager.Contracts.dll"
    )
    Get-ChildItem $DllPaths -rec |? { !$_.Directory.FullName.Contains('Tests') } |% {
        $OutputDir = "$($_.Directory.FullName)\symstore"
        if (!(Test-Path $OutputDir)) { mkdir $OutputDir | Out-Null }
        Write-Host "Converting PDB for $_"
        azure-pipelines\Convert-PDB.ps1 -DllPath $_ -OutputPath "$OutputDir\$($_.BaseName).pdb"
    }
  displayName: Converting portable PDBs to Windows PDBs

- task: CopyFiles@1
  inputs:
    Contents: |
      bin/libman/$(BuildConfiguration)/**/libman.dll
      bin/libman/$(BuildConfiguration)/**/symstore/libman.pdb
      bin/Microsoft.Web.LibraryManager/$(BuildConfiguration)/**/Microsoft.Web.LibraryManager.dll
      bin/Microsoft.Web.LibraryManager/$(BuildConfiguration)/**/symstore/Microsoft.Web.LibraryManager.pdb
      bin/Microsoft.Web.LibraryManager.Build/$(BuildConfiguration)/**/Microsoft.Web.LibraryManager.Build.dll
      bin/Microsoft.Web.LibraryManager.Build/$(BuildConfiguration)/**/symstore/Microsoft.Web.LibraryManager.Build.pdb
      bin/Microsoft.Web.LibraryManager.Contracts/$(BuildConfiguration)/**/Microsoft.Web.LibraryManager.Contracts.dll
      bin/Microsoft.Web.LibraryManager.Contracts/$(BuildConfiguration)/**/symstore/Microsoft.Web.LibraryManager.Contracts.pdb
      bin/Microsoft.Web.LibraryManager.Vsix/$(BuildConfiguration)/**/Microsoft.Web.LibraryManager.Vsix.dll
      bin/Microsoft.Web.LibraryManager.Vsix/$(BuildConfiguration)/**/Microsoft.Web.LibraryManager.Vsix.pdb
    TargetFolder: $(Build.ArtifactStagingDirectory)/symbols
  displayName: Collecting symbols artifacts

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/symbols
    ArtifactName: symbols
    ArtifactType: Container
  displayName: Publish symbols as Azure DevOps artifacts

- task: PublishSymbols@2
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols
    SearchPattern: '**/*.pdb'
    IndexSources: false
    SymbolServerType: TeamServices
  displayName: Publish symbols to symbol server
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
